{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///(webpack)/buildin/global.js","webpack:///./src/commands/commands.ts","webpack:///./src/commands/formatter.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","g","this","Function","e","window","Office","initialize","reason","self","console","info","onReady","global","undefined","reformatEmail","event","preferences","context","roamingSettings","item","mailbox","body","getTypeAsync","result","emailFormat","getAsync","status","AsyncResultStatus","Failed","completed","CoercionType","Html","newBody","reformatEmailBody","Text","setAsync","coercionType","message","notificationMessages","replaceAsync","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","getHeaderlessContent","content","match","log","substring","index","length","getCitation","matchResult","senderString","nextIndex","timestamp","addQuotesToEmail","format"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,K,oBClFrD,IAAIC,EAGJA,EAAI,WACH,OAAOC,KADJ,GAIJ,IAECD,EAAIA,GAAK,IAAIE,SAAS,cAAb,GACR,MAAOC,GAEc,iBAAXC,SAAqBJ,EAAII,QAOrCrC,EAAOD,QAAUkC,G,+FCdjB,aAIAK,OAAOC,WAAa,SAASC,GAC3BC,KAAKC,QAAQC,KAAK,sBAAwBH,IAG5CF,OAAOM,SAAQ,WACbH,KAAKC,QAAQC,KAAK,sBAmFK,oBAATF,KACVA,KACkB,oBAAXJ,OACPA,YACkB,IAAXQ,EACPA,OACAC,GAMJC,cApFF,SAAuBC,GAErB,IAAIC,EAAcX,OAAOY,QAAQC,gBAAgBrC,IAAI,eACrD2B,KAAKC,QAAQC,KAAK,eAAgBM,GAGlC,IAAIG,EAAOd,OAAOY,QAAQG,QAAQD,KAGlCA,EAAKE,KAAKC,cAAa,SAASC,GAC9B,IAAIC,EAAcD,EAAOtC,MACzBuB,KAAKC,QAAQC,KAAK,kBAAmBc,GAGrCL,EAAKE,KAAKI,SAASD,GAAa,SAASD,GAUvC,GATAf,KAAKC,QAAQC,KAAK,iBAAkBa,EAAOG,QAGvCH,EAAOG,QAAUrB,OAAOsB,kBAAkBC,QAAQb,EAAMc,YAMxDL,GAAenB,OAAOyB,aAAaC,KACrC,IAAIC,EAAU,EAAAC,kBAAkBV,EAAOtC,MAAO+B,QACtBX,OAAOyB,aAAaI,KAK9Cf,EAAKE,KAAKc,SAASH,EAAS,CAAEI,aAAcZ,IAAe,SAASD,GAyB1E,IAAgCc,EAxBxB7B,KAAKC,QAAQC,KAAK,iBAAkBa,EAAOG,QAG3CP,EAAKmB,qBAAqBC,aACxB,iBAoBsBF,EAnBC,6CAoBxB,CACLG,KAAMnC,OAAOoC,aAAaC,4BAA4BC,qBACtDN,QAASA,EACTO,KAAM,aACNC,YAAY,KApBR9B,EAAMc,sB,oiBC9Bd,SAAgBiB,EAAqBC,GACnC,IACIxB,EAASwB,EAAQC,MADN,8DAEf,OAAY,MAATzB,EAAsBwB,GAEzBtC,QAAQwC,IAAI1B,EAAO,IACZwB,EAAQG,UAAU3B,EAAO4B,MAAQ5B,EAAO,GAAG6B,SAKpD,SAAgBC,EAAYN,GAC1BtC,QAAQwC,IAAI,WAAYF,GAGxB,IACIO,EAAcP,EAAQC,MADb,qFAEb,GAAmB,MAAfM,EAAqB,MAAO,GAChC,IAAIC,EAAeD,EAAY,GAC3BE,EAAYF,EAAYH,MAAQI,EAAaH,OACjD3C,QAAQwC,IAAI,gBAAiBM,GAK7B,GAAmB,OADnBD,EAAcP,EAAQG,UAAUM,GAAWR,MADzB,oCAEO,MAAO,GAChC,IAAIS,EAAYH,EAAY,GAK5B,OAJA7C,QAAQwC,IAAI,mBAAoBQ,GAEjB,MAAMA,EAAS,KAAKF,EAAY,UAgBjD,SAAgBG,EAAiBX,EAAiBY,QAAA,IAAAA,MAAA,QAQhD,MAHE,gIAE+BZ,EAAU,gB,iDA3E7C,6BAAkC1B,EAAcL,GAoB9C,OAnBAP,QAAQwC,IAAI,0CAA2CjC,GAezC,OAXCqC,EAAYhC,GAQTqC,EALMZ,EAAqBzB,GAKS,SAUxD,yBAWA,gBAkCA,qB","file":"commands.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 691);\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*\n * Original work Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * Modified work Copyright dyyu. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\nimport { reformatEmailBody } from \"./formatter\";\n/* global Office, self, window */\n\n// The initialize function must be run each time a new page is loaded.\nOffice.initialize = function(reason) {\n  self.console.info(\"Office.initialize: \" + reason);\n};\n\nOffice.onReady(() => {\n  self.console.info(\"Office.onReady\");\n  // If needed, Office.js is ready to be called\n});\n\n/**\n * Shows a notification when the add-in command is executed.\n *\n * @param {Office.AddinCommands.Event} event\n *        Context information for this UI-less command\n *\n */\nfunction reformatEmail(event) {\n  // Fetch user preferences\n  var preferences = Office.context.roamingSettings.get(\"preferences\");\n  self.console.info(\"Preferences:\", preferences);\n\n  // Create shorthands\n  var item = Office.context.mailbox.item;\n\n  // Check whether the body is plaintext or html\n  item.body.getTypeAsync(function(result) {\n    var emailFormat = result.value;\n    self.console.info(\"Email format is\", emailFormat);\n\n    // Get the current body (this does not include the message history if it's hidden)\n    item.body.getAsync(emailFormat, function(result) {\n      self.console.info(\"Get email body\", result.status);\n\n      // Do nothing if the there's an error getting the body\n      if (result.status == Office.AsyncResultStatus.Failed) event.completed();\n\n      // TODO: Replace the quoted email header with a single line:\n      // E.g., On Thursday, April 23, 2020 at 4:15 PM Jane <jane@protonmail.ch> wrote:\n\n      // Add the quotes\n      if (emailFormat == Office.CoercionType.Html) {\n        var newBody = reformatEmailBody(result.value, preferences);\n      } else if (emailFormat == Office.CoercionType.Text) {\n        // TODO: handle plain text email\n      }\n\n      // Write to the new body\n      item.body.setAsync(newBody, { coercionType: emailFormat }, function(result) {\n        self.console.info(\"Set email body\", result.status);\n\n        // Show a notification message\n        item.notificationMessages.replaceAsync(\n          \"reformatEmail\",\n          getNotificationMessage(\"Email is now reformatted for inline reply.\")\n        );\n\n        // Be sure to indicate when the add-in command function is complete\n        event.completed();\n      });\n    });\n  });\n}\n\n/**\n * Returns an object containing the notifcation settings\n *\n * @param {string} message\n *        Text message to show in the notification\n *\n * @returns {object}\n *          The objecting containing notification info\n */\nfunction getNotificationMessage(message: string) {\n  return {\n    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n    message: message,\n    icon: \"Icon.80x80\",\n    persistent: false\n  };\n}\n\n/**\n * Gets the global scope\n *\n * @returns {window}\n *          The global scope\n */\nfunction getGlobal() {\n  return typeof self !== \"undefined\"\n    ? self\n    : typeof window !== \"undefined\"\n    ? window\n    : typeof global !== \"undefined\"\n    ? global\n    : undefined;\n}\n\nconst g = getGlobal() as any;\n\n// the add-in command functions need to be available in global scope\ng.reformatEmail = reformatEmail;\n","import * as userSettings from \"../common/userSettings\";\n\n/**\n * Reformats an email body to support inline replies\n *\n * @param {string} body\n *        The email body\n * @param {userSettings.Preferences} preferences\n *        User preferences\n *\n * @returns {string}\n *          The modified email body\n */\nexport function reformatEmailBody(body: string, preferences: userSettings.Preferences): string {\n  console.log(\"reformatEmailBody: received preferences\", preferences);\n\n  // Extract email header and replace it with \"On DATE TIME, NAME <EMAIL> wrote\"\n  // Extract the sender and the time from the quoted email\n  var citation = getCitation(body);\n\n  // Remove the email header\n  var headerlessContent = getHeaderlessContent(body);\n\n  // Remove external sensor warning\n\n  // Add quotes to email\n  var quotedEmail = addQuotesToEmail(headerlessContent, \"html\");\n\n  // Combine the new body to return, with a new line for user input\n  var newBody = `<br>${citation}${quotedEmail}`;\n\n  // Add a new line (unquoted) before the body for user input\n\n  return newBody;\n}\n\nexport function getHeaderlessContent(content: string) {\n  var headerRe = /<hr (.)+>(\\n)*<div (.)+(\\n)*(<b>(.)+(\\n)*)+((.)*\\n)<\\/div>/;\n  var result = content.match(headerRe);\n  if(result ==null) return content;\n\n  console.log(result[0]);\n  return content.substring(result.index + result[0].length);\n  \n  return content;\n}\n\nexport function getCitation(content: string) {\n  console.log(\"content:\", content);\n\n  // Extract sender name and email\n  var nameRe = /(?<=<b>(.)+:<\\/b> )(.)*&lt;\\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\\b&gt;/;\n  var matchResult = content.match(nameRe);\n  if (matchResult == null) return \"\";\n  var senderString = matchResult[0];\n  var nextIndex = matchResult.index + senderString.length;\n  console.log(\"Sender found:\", senderString);\n\n  // Extract sent time and date\n  var timestampRe = /(?<=<b>(.)+:<\\/b> )(.)+(?=<br>)/;\n  matchResult = content.substring(nextIndex).match(timestampRe);\n  if (matchResult == null) return \"\";\n  var timestamp = matchResult[0];\n  console.log(\"Timestamp found:\", timestamp);\n\n  var citation = `On ${timestamp}, ${senderString} wrote:`;\n\n  return citation;\n}\n\n/**\n * Adds quotes to an email content\n *\n * @param {string} content\n *        The content of the email\n * @param {string} format\n *        The format of the email\n *\n * @returns {string}\n *          The quoted email content\n */\nexport function addQuotesToEmail(content: string, format: string = \"html\"): string {\n  // If HTML, add blockquote\n  // If plain text, remove redundant new lines if preferred, and then add \"> \" in front of everyline\n  format;\n  var blockquoteTag =\n    '<blockquote class=\"x_gmail_quote\" style=\"margin:0px 0px 0px 0.8ex; border-left:1px solid rgb(204,204,204); padding-left:1ex\">';\n\n  var newContent = blockquoteTag + content + \"</blockquote>\";\n  return newContent;\n}\n"],"sourceRoot":""}